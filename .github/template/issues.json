[
    {
        "body": "This first set of challenges focus on the following skills:\r\n\r\n-   Working with primitive data types (strings, numbers, booleans, null, undefined)\r\n-   Operators\r\n-   Functions\r\n-   Working with complex data types (objects, arrays)\r\n-   Conditional logic (if statements, switch statements)\r\n-   Looping over arrays\r\n\r\nYou will need to to the following:\r\n\r\n- Run `npm test test/exercise001.test.js`\r\n- Edit the code in `src/exercise001.js` to implement each function so all the tests pass.\r\n- Make sure to `add` and `commit` every time you get something working!\r\n- Push up to Github.\r\n",
        "title": "Exercises 001"
    },
    {
        "body": "These challenges encourage you to keep on practicing your JavaScript skills!\r\n\r\n1. Run `npm run eslint` in your terminal. Make sure you fix any linting errors from the previous challenges.\r\n2. If you made any changes in the previous 2 steps, make sure to commit them.\r\n3. Look at the `test/exercise002.test.js` file where you will see the tests for this set of challenges.\r\n4. Complete the functions in `src/exercise002.js` in order to make the tests pass.\r\n\r\n👉 Remember that you can pause tests or run only specific tests - see the main [README.md](../) file for details.\r\n\r\n",
        "title": "Exercises 002"
    },
    {
        "body": "Once again we have a selection of JavaScript challenges for you to work through.\r\n\r\n1. Take a look over your _indentation_ for the previous challenges. Does everything look neat? If you right click inside your files and select **Format Document**, does VSCode make any adjustments? If so, add and commit these changes.\r\n2. Work through the challenges in the `src/exercise003.js` file, adding and committing your work as you go.\r\n",
        "title": "Exercises 003"
    },
    {
        "body": "\r\n\r\nThese challenges are all around looping! ↬\r\n\r\n1. Remind yourself of how a for loop works, and how it can be used to access items in an array or characters in a string. If you need a reminder of the syntax, take a look at [this repl project](https://replit.com/@eggsy84/UniformAdmiredPolyhedron#index.js).\r\n\r\n2. Solve all the challenges using a for loop and make a commit when you are done. (You can make commits along the way too but make sure they signal that you are solving the challenges with a for loop)\r\n\r\n3. Revisit each challenge and replace the for loop with `.forEach`. For a reminder of the syntax of `forEach`, take a look at [this repl project](https://replit.com/@eggsy84/SuperiorDifferentLicenses#index.js) and read it through line by line, ensuring you understand the code's behaviour.\r\n\r\n4. Remind yourself how `.filter` and `.map` work. Take a look at [this repl project](https://replit.com/@eggsy84/InsidiousNuttyHertz#index.js) for examples.\r\n\r\n5. Take another look over your functions. Can you identify which functions could use `map` or `filter` instead of `forEach`? Are any functions **transformations** and are any functions **filtering** out items from an array? If so, refactor each function to use the appropriate choice of map/filter and commit your changes.\r\n\r\n💡 Note: You may notice slight code differences between these challenges and the ones in the video like the use of `module.exports = {}`. This is just an older way of exporting modules in node. These challenges now use ECMAScript Modules `import/export` syntax which are now the official standard for packaging code for reuse in both client- and server-side JavaScript.\r\n\r\n## Cheatsheet\r\n\r\n#### For Loop\r\n\r\n-   Loop over arrays, or characters in a string\r\n-   You have full control over the items you access - you can start your index positions at 1 or 3 or 0, get every other item, etc.\r\n\r\nBasic Syntax:\r\n\r\n```javascript\r\nconst arr = ['foo', 'bar', 'baz'];\r\n\r\nfor (let i = 0; i < arr.length; i++) {\r\n\t// do something with arr[i]\r\n}\r\n```\r\n\r\n#### forEach\r\n\r\n-   Available on arrays only\r\n-   Access every item 1 by 1\r\n-   Very versatile, do whatever you want with each item in an array\r\n\r\nBasic Syntax:\r\n\r\n```javascript\r\nconst arr = ['foo', 'bar', 'baz'];\r\n\r\narr.forEach(function (item) {\r\n\t// do something with item\r\n});\r\n```\r\n\r\n#### map\r\n\r\n-   Available on arrays only\r\n-   Access every item 1 by 1\r\n-   Used to transform items\r\n-   You will get an array of the same length\r\n-   Return the result of the transformation which will be put into the new array\r\n-   Remember to save the new array in a variable\r\n\r\nBasic Syntax:\r\n\r\n```javascript\r\nconst arr = ['foo', 'bar', 'baz'];\r\n\r\nconst newArr = arr.map(function (item) {\r\n\t// do something with item e.g.\r\n\treturn item.charAt(0);\r\n});\r\n\r\n// newArr is your new transformed array\r\n```\r\n\r\n#### filter\r\n\r\n-   Available on arrays only\r\n-   Access every item 1 by 1\r\n-   Used to select only specific items from an array\r\n-   Return `true` to keep an item, `false` to reject\r\n-   Remember to save the new array in a variable\r\n\r\nBasic Syntax:\r\n\r\n```javascript\r\nconst arr = ['foo', 'bar', 'bazzzz'];\r\n\r\nconst newArr = arr.filter(function (item) {\r\n\t// do something with item e.g.\r\n\tif (item.length > 3) {\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n});\r\n\r\n// newArr is your new filtered array\r\n```\r\n\r\n",
        "title": "Exercises 004"
    },
    {
        "body": "\r\nThis time we've got a few more problem solving challenges for you to work through...\r\n\r\nBut as an extra challenge we want to make sure you're used to the ES6 arrow function syntax, so we've defined our functions using this new syntax. ⬅️\r\n\r\n## Tasks\r\n\r\n1. Read the short guide to ES6 arrow functions included below.\r\n2. Solve the problems in the `src/exercise005.js` file. If you use any functions _within_ the main functions, such as within a map, use arrow functions there too!\r\n3. Take a look through your code and see if there is anywhere you can shorten your functions to use the \"implicit return\" syntax.\r\n4. Take a look through your code and see if there's anywhere you can omit the function parentheses when using ES6 arrow syntax.\r\n5. If you want to read more about new features added to the JavaScript language in the latest major version, ES6, [this online book](http://exploringjs.com/es6/) is well worth a look. 👀\r\n\r\n# ➡️ ES6 Arrow Functions ⬅️\r\n\r\nES6 arrow functions provide an alternative syntax for creating functions. In ES6, these two snippets of code are more or less equivalent:\r\n\r\n```javascript\r\nfunction add(a, b) {\r\n\treturn a + b;\r\n}\r\n\r\nadd(10, 9);\r\n```\r\n\r\n```javascript\r\nconst add = (a, b) => {\r\n\treturn a + b;\r\n};\r\n\r\nadd(10, 9);\r\n```\r\n\r\nThere are small differences between an arrow function and a normal function. For example in a normal function you can use a special variable, `arguments` inside the function to list all the arguments the function received.\r\n\r\nThere also some differences around the keyword `this` too, which we don't need to go into at the moment.\r\n\r\n#### Inplicit Return\r\n\r\nArrow functions allow us to shorten the syntax and do a one-line return statement, omiting the `return` keyword. This is a nice way of shortening very simple functions. For example:\r\n\r\n```javascript\r\nconst add = (a, b) => {\r\n\treturn a + b;\r\n};\r\n```\r\n\r\nCan be re-written as:\r\n\r\n```javascript\r\nconst add = (a, b) => a + b;\r\n```\r\n\r\nWhere `a + b` is the return value of the function. This will not work for functions with more than 1 line in the function body.\r\n\r\n#### Optional Parentheses\r\n\r\nWhen your function takes a single parameter, you can choose to omit the parentheses around the parameter name when using ES6 arrow syntax:\r\n\r\nFor example:\r\n\r\n```javascript\r\nconst isEven = (a) => {\r\n\treturn a % 2 === 0;\r\n};\r\n```\r\n\r\nCan be re-written as:\r\n\r\n```javascript\r\nconst isEven = (a) => {\r\n\treturn a % 2 === 0;\r\n};\r\n```\r\n\r\nAnd with implicit return as well:\r\n\r\n```javascript\r\nconst isEven = (a) => a % 2 === 0;\r\n```\r\n\r\n",
        "title": "Exercises 005"
    },
    {
        "body": "This time we've decided to give you the exciting challenge of _writing your own tests_. This is a really important skill to practice as generally in industry you will be writing your own tests to ensure code works as expected.\r\n\r\nTests also serve as great documentation to other developers about how your code should behave and the intention of your code. 📝\r\n\r\nTake a look at https://jestjs.io/docs/using-matchers.\r\n\r\nThen, work through the exercises in a TDD (Test Driven Development) approach of Red -> Green -> Refactor.\r\n\r\n⚠️ Be careful to ensure your test cases cover the full range of possible eventualities! For example, if you just test the numbers `2`, `3` and `4` for `isPrime` can you be sure that your function is actually correct?\r\n\r\n",
        "title": "Exercises 006"
    },
    {
        "body": "Well done for getting this far! 🎉 🥳\r\n\r\nOnce again, we'd like you to write your own unit tests.\r\n\r\nWork through the exercises in a TDD (Test Driven Development) approach of Red -> Green -> Refactor\r\n\r\nIn these exercises you have covered forLoops, ES6 methods like `.map()` and `.forEach()`, eslint, Test Driven Development and more!\r\n",
        "title": "Exercises 007"
    },
    {
        "body": "Congratulations for finishing these JavaScript challenges!\r\n\r\nYou have covered so many different JavaScript concepts and skills in a very short space of time, including:\r\n\r\n- Problem Solving\r\n- For Loops\r\n- ES6 methods\r\n- Conditionals\r\n- Data Types\r\n- Objects\r\n  and more!\r\n\r\nIn these exercises we would like you to try some of the very latest JavaScript and have a go with Optional Chaining!\r\n\r\n# Task 1: The Spread Operator\r\n\r\nThe Spread Operator or 'Spread Syntax' is a handy feature where you can iterate through iterable data (like arrays, strings or objects) simply using '...' syntax. This is especially useful when working with lists as well as iterating through large amounts of data quickly.\r\n\r\n1.1) Work through the Katas in exercise008 solving these using the ✨Spread Operator✨\r\n\r\n1.2) Revisit your getLongestSides() function from Exercise004. Can you refactor this function using Spread Syntax too?\r\n\r\nYou may have solved it using this method already - in which case, great job! 🙌 Is there anywhere else in your code where this method might be useful?\r\n\r\n# Task 2: Optional Chaining\r\n\r\nWhen working with objects in JavaScript we often want to access certain properties of an object to, for example, display different or conditional information on a webpage.\r\n\r\nHowever, sometimes there are situations where we don't know whether certain data exists (like when calling an external API) or where data not existing or being 'null' is normal/expected. If we try and access non-existent properties on an object when an intermediate property does not exist, JavaScript throws an error!\r\n\r\nFor example, if we have some users, and we try to access their postcodes but - oh oh! They haven't provided addresses, JavaScript throws an error.\r\n\r\n```js\r\nlet user = {}; // a user without \"address\" property\r\n\r\nalert(user.address.postcode); // Throws Error!\r\n```\r\n\r\nNote: if you simply tried to access user.address and the user doesn't have an address, JavaScript returns undefined. JavaScript only throws an error if an intermediate property isn't there (in the above solution, `address` is the intermediate property)\r\n\r\nThere are many ways of getting around this such as conditionally checking a property exists before trying to access it, such as:\r\n\r\n```js\r\nalert(user.address !== undefined ? user.address.postcode : null)\r\n```\r\n\r\nThese workarounds can get messy and confusing though, especially if you have something deeply nested ⫸\r\n\r\nA more elegant solution is ✨Optional Chaining✨:\r\n\r\n```js\r\nalert(user?.address?.postcode); // undefined (no error)\r\n```\r\n\r\nThe above code checks user exists (is not null or undefined). If user _does_ exist it moves on and checks address exists. If address exists it will try and return postcode. If anywhere in this chain is undefined or null (a broken chain! ⛓), the operation exits or \"short-circuits\" with undefined.\r\n\r\nThis method can also be used to check for functions or properties, where a function or property may not exist. For example:\r\n\r\n```js\r\nlet catUser = {\r\n    miceEaten: 5,\r\n  sayMeow() {\r\n    alert(\"Meow!\");\r\n  }\r\n};\r\n\r\nlet dogUser = {};\r\n\r\ncatUser.sayMeow?.(); // Meow!\r\n\r\ndogUser.sayMeow?.(); // nothing (method doesn't exist)\r\n\r\n\r\ncatUser.miceEaten?.[]; // 5\r\n\r\ndogUser.miceEaten?.[]; // undefined (dogs don't eat mice, silly! 🐭)\r\n```\r\n\r\n1.1) Work through Exercises 008 using ✨Optional chaining✨\r\n\r\nWhen it comes to working with React you will find Spread Syntax, Optional Chaining and methods like `.map()` and `.filter()` help a lot. We hope you enjoyed these exercises.\r\n\r\nHappy coding!\r\n",
        "title": "Exercises 008"
    }
]